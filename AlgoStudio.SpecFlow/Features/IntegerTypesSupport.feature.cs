// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AlgoStudio.SpecFlow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("IntegerTypesSupport")]
    public partial class IntegerTypesSupportFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "IntegerTypesSupport.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "IntegerTypesSupport", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Addition")]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "1", "2", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "2", "3", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "1", "2147483646", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "2147483647", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-2147483648", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "123456789", "-987654321", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "0", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "2147483647", "-2147483648", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "1", "2", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "2", "3", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "1", "32767", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "32767", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-32768", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "12345", "-9876", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "0", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "32767", "-32768", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "1", "2", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "2", "3", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "1", "127", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "127", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-128", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "123", "-98", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "0", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "127", "-128", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "1", "2", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "2", "3", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "1", "9223372036854775806", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "9223372036854775807", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-9223372036854775808", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "123456789", "-987654321", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "0", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "9223372036854775807", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "1", "2", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "2", "3", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "1", "2147483646", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "2147483647", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "4294967295", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "123456789", "3421772750", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "0", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "2147483647", "2147483648", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "1", "2", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "2", "3", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "1", "32767", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "32767", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "65535", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "12345", "55560", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "0", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "32767", "32768", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "1", "2", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "2", "3", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "1", "127", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "127", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "255", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "123", "158", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "0", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "127", "128", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "1", "2", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "2", "3", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "1", "9223372036854775806", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "9223372036854775807", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "18446744073709551615", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "123456789", "18446744073586099737", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "0", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "9223372036854775807", "9223372036854775808", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "1", "2", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "2", "3", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "1", "92233720368547758060", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "92233720368547758070", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-92233720368547758080", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "1234567890", "-9876543210", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "0", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "92233720368547758070", "-92233720368547758080", "BigInteger", null)]
        public virtual void Addition(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Addition", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
 testRunner.When(string.Format("Two integers \'{0}\' and \'{1}\' of integer type \'{2}\' are added", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiplication")]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "0", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-1", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "1", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "0", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "1", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "0", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-1", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "2147483647", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-2147483648", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "2147483647", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-2147483648", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "32767", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-32768", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "32767", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-32768", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "0", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-1", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "1", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "0", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "1", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "0", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-1", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "32767", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-32768", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "32767", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-32768", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "127", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-128", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "127", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-128", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "0", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-1", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "1", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "0", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "1", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "0", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-1", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "127", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-128", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "127", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-128", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "7", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-8", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "7", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-8", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "0", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-1", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "1", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "0", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "1", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "0", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-1", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "9223372036854775807", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-9223372036854775808", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "9223372036854775807", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-9223372036854775808", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "2147483647", "4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-2147483648", "4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "2147483647", "-4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-2147483648", "-4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "0", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "1", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "1", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "0", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "2147483647", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "4294967295", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "32767", "65536", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "0", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "1", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "1", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "0", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "32767", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "65535", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "127", "256", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "0", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "1", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "1", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "0", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "127", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "255", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "7", "16", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "0", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "1", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "1", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "0", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "9223372036854775807", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "18446744073709551615", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "9223372036854775807", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "18446744073709551615", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "2147483647", "4294967296", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "2147483648", "4294967296", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "2147483647", "18446744069414584320", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "2147483648", "18446744069414584320", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "0", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "1", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-1", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "1", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-1", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "0", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "1", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "0", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-1", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "92233720368547758070", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-92233720368547758080", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "92233720368547758070", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-92233720368547758080", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "2147483647", "4294967296", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-2147483648", "4294967296", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "2147483647", "-4294967296", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-2147483648", "-4294967296", "BigInteger", null)]
        public virtual void Multiplication(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplication", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 87
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 88
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 89
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.When(string.Format("Two integers \'{0}\' and \'{1}\' of integer type \'{2}\' are multiplied", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 91
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Division")]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-1", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "1", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "0", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "0", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "2147483647", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-2147483647", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "2147483647", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-2147483648", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "32767", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-32768", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "32767", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-32768", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-1", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "1", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "0", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "0", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "32767", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-32768", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "32767", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-32768", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "127", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-128", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "127", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-128", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-1", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "1", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "0", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "1", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "0", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-1", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "127", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-128", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "127", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-128", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "7", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-8", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "7", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-8", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "0", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-1", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "1", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "0", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "1", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "0", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-1", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "9223372036854775807", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-9223372036854775808", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "9223372036854775807", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-9223372036854775807", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "2147483647", "4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-2147483648", "4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "2147483647", "-4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-2147483648", "-4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "1", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "1", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "0", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "2147483647", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "4294967295", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "32767", "65536", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "1", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "1", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "0", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "32767", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "65535", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "127", "256", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "1", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "1", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "0", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "127", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "255", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "7", "16", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "0", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "1", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "1", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "0", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "9223372036854775807", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "18446744073709551615", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "2147483647", "4294967296", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "4294967295", "2", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "2147483647", "2", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "65536", "32767", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "65535", "2", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "32767", "2", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "256", "127", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "255", "2", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "127", "2", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "16", "7", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "18446744073709551615", "2", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "9223372036854775807", "2", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "4294967296", "2147483647", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "0", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "1", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-1", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "1", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-1", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "0", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "1", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "0", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "0", "-5", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-1", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "92233720368547758070", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-92233720368547758080", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "92233720368547758070", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-92233720368547758080", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "2147483647", "4294967296", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-2147483648", "4294967296", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "2147483647", "-4294967296", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-2147483648", "-4294967296", "BigInteger", null)]
        public virtual void Division(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Division", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 213
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 214
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 215
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 216
 testRunner.When(string.Format("Two integers \'{0}\' and \'{1}\' of integer type \'{2}\' are divided", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 217
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtraction")]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "10", "5", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-10", "-5", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "10", "-5", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-10", "5", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "0", "5", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "0", "-5", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "2147483647", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-2147483648", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "2147483647", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-2147483648", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "32767", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-32768", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "32767", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-32768", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "10", "5", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-10", "-5", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "10", "-5", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-10", "5", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "0", "5", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "0", "-5", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "32767", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-32768", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "32767", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-32768", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "127", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-128", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "127", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-128", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "10", "5", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-10", "-5", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "10", "-5", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-10", "5", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "0", "5", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "0", "-5", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "127", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-128", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "127", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-128", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "7", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-8", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "7", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-8", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "10", "5", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-10", "-5", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "10", "-5", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-10", "5", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "0", "5", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "0", "-5", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "9223372036854775807", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-9223372036854775808", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "9223372036854775807", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-9223372036854775808", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "2147483647", "4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-2147483648", "4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "2147483647", "-4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-2147483648", "-4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "10", "5", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "10", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "0", "5", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "2147483647", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "4294967295", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "32767", "65536", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "10", "5", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "10", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "0", "5", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "32767", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "65535", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "127", "256", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "10", "5", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "10", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "0", "5", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "127", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "255", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "7", "16", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "10", "5", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "10", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "0", "5", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "9223372036854775807", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "18446744073709551615", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "2147483647", "4294967296", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "10", "5", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-10", "-5", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "10", "-5", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-10", "5", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "0", "5", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "0", "-5", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "92233720368547758070", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-92233720368547758080", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "92233720368547758070", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-92233720368547758080", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "2147483647", "4294967296", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-2147483648", "4294967296", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "2147483647", "-4294967296", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-2147483648", "-4294967296", "BigInteger", null)]
        public virtual void Subtraction(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtraction", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 339
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 340
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 341
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 342
 testRunner.When(string.Format("Two integers \'{0}\' and \'{1}\' of integer type \'{2}\' are subtracted", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 343
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remainder")]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "10", "5", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-10", "-5", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "10", "-5", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-10", "5", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "0", "5", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "0", "-5", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "2147483647", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-2147483647", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "2147483647", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-2147483648", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "32767", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-32768", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "32767", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Arithmetic", "-32768", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "10", "5", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-10", "-5", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "10", "-5", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-10", "5", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "0", "5", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "0", "-5", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "32767", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-32768", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "32767", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-32768", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "127", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-128", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "127", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Arithmetic", "-128", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "10", "5", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-10", "-5", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "10", "-5", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-10", "5", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "0", "5", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "0", "-5", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "127", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-128", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "127", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-128", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "7", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-8", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "7", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Arithmetic", "-8", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "10", "5", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-10", "-5", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "10", "-5", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-10", "5", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "0", "5", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "0", "-5", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "9223372036854775807", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-9223372036854775807", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "9223372036854775807", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-9223372036854775808", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "2147483647", "4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-2147483648", "4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "2147483647", "-4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Arithmetic", "-2147483648", "-4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "10", "5", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "10", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "0", "5", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "2147483647", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "4294967295", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Arithmetic", "32767", "65536", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "10", "5", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "10", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "0", "5", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "32767", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "65535", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Arithmetic", "127", "256", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "10", "5", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "10", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "0", "5", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "127", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "255", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Arithmetic", "7", "16", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "10", "5", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "10", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "0", "5", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "9223372036854775807", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "18446744073709551615", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Arithmetic", "2147483647", "4294967296", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "10", "5", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-10", "-5", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "10", "-5", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-10", "5", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "0", "5", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "0", "-5", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "92233720368547758070", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-92233720368547758080", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "92233720368547758070", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-92233720368547758080", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "2147483647", "4294967296", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-2147483648", "4294967296", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "2147483647", "-4294967296", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntArithmetic", "-2147483648", "-4294967296", "BigInteger", null)]
        public virtual void Remainder(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remainder", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 443
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 444
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 445
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 446
 testRunner.When(string.Format("Two integers \'{0}\' and \'{1}\' of integer type \'{2}\'  are remaindered", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 447
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("And")]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "2147483647", "2147483647", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "-2147483647", "-2147483647", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "-2147483647", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "2147483647", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "2147483647", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "65536", "2147483647", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "32767", "32767", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "-32767", "-32767", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "-32767", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "32767", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "32767", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "256", "32767", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "127", "127", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "-127", "-127", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "-127", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "127", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "127", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "16", "127", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "9223372036854775807", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "-9223372036854775807", "-9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "-9223372036854775807", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "9223372036854775807", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "9223372036854775807", "4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "4294967296", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "2147483647", "2147483647", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "2147483647", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "2147483647", "65536", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "65536", "2147483647", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "32767", "32767", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "32767", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "32767", "256", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "256", "32767", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "127", "127", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "127", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "127", "16", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "16", "127", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "9223372036854775807", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "9223372036854775807", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "9223372036854775807", "4294967296", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "4294967296", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BoolBitwise", "true", "false", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolBitwise", "false", "false", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolBitwise", "false", "true", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolBitwise", "true", "true", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntBitwise", "92233720368547758070", "92233720368547758070", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntBitwise", "-92233720368547758070", "-92233720368547758070", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntBitwise", "-92233720368547758070", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntBitwise", "92233720368547758070", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntBitwise", "92233720368547758070", "4294967296", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntBitwise", "4294967296", "92233720368547758070", "BigInteger", null)]
        public virtual void And(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("And", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 547
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 548
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 549
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 550
 testRunner.When(string.Format("Two integers \'{0}\' and \'{1}\' of integer type \'{2}\' are bitwise anded", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 551
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Or")]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "2147483647", "2147483647", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "-2147483647", "-2147483647", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "-2147483647", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "2147483647", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "2147483647", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "65536", "2147483647", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "32767", "32767", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "-32767", "-32767", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "-32767", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "32767", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "32767", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "256", "32767", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "127", "127", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "-127", "-127", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "-127", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "127", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "127", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "16", "127", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "9223372036854775807", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "-9223372036854775807", "-9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "-9223372036854775807", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "9223372036854775807", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "9223372036854775807", "4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "4294967296", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "2147483647", "2147483647", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "2147483647", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "2147483647", "65536", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "65536", "2147483647", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "32767", "32767", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "32767", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "32767", "256", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "256", "32767", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "127", "127", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "127", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "127", "16", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "16", "127", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "9223372036854775807", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "9223372036854775807", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "9223372036854775807", "4294967296", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "4294967296", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BoolBitwise", "true", "false", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolBitwise", "false", "false", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolBitwise", "false", "true", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolBitwise", "true", "true", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntBitwise", "92233720368547758070", "92233720368547758070", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntBitwise", "-92233720368547758070", "-92233720368547758070", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntBitwise", "-92233720368547758070", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntBitwise", "92233720368547758070", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntBitwise", "92233720368547758070", "4294967296", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntBitwise", "4294967296", "92233720368547758070", "BigInteger", null)]
        public virtual void Or(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Or", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 608
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 609
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 610
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 611
 testRunner.When(string.Format("Two integers \'{0}\' and \'{1}\' of integer type \'{2}\' are bitwise ored", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 612
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Xor")]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "2147483647", "2147483647", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "-2147483647", "-2147483647", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "-2147483647", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "2147483647", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "2147483647", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "65536", "2147483647", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "32767", "32767", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "-32767", "-32767", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "-32767", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "32767", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "32767", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "256", "32767", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "127", "127", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "-127", "-127", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "-127", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "127", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "127", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "16", "127", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "9223372036854775807", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "-9223372036854775807", "-9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "-9223372036854775807", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "9223372036854775807", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "9223372036854775807", "4294967296", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "4294967296", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "2147483647", "2147483647", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "2147483647", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "2147483647", "65536", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "65536", "2147483647", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "32767", "32767", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "32767", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "32767", "256", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "256", "32767", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "127", "127", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "127", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "127", "16", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "16", "127", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "9223372036854775807", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "9223372036854775807", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "9223372036854775807", "4294967296", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "4294967296", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BoolBitwise", "true", "false", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolBitwise", "false", "false", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolBitwise", "false", "true", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolBitwise", "true", "true", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntBitwise", "92233720368547758070", "92233720368547758070", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntBitwise", "-92233720368547758070", "-92233720368547758070", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntBitwise", "-92233720368547758070", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntBitwise", "92233720368547758070", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntBitwise", "92233720368547758070", "4294967296", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntBitwise", "4294967296", "92233720368547758070", "BigInteger", null)]
        public virtual void Xor(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Xor", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 671
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 672
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 673
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 674
 testRunner.When(string.Format("Two integers \'{0}\' and \'{1}\' of integer type \'{2}\' are bitwise xord", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 675
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Shl")]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "0", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "-1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "1", "31", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "-1", "31", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "0", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "2147483647", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "-2147483648", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "2147483647", "31", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "-2147483648", "31", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "32767", "16", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "-32768", "16", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "0", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "-1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "1", "15", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "-1", "15", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "0", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "32767", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "-32768", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "32767", "15", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "-32768", "15", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "127", "8", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "-128", "8", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "0", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "-1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "1", "7", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "-1", "7", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "0", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "127", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "-128", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "127", "7", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "-128", "7", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "7", "4", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "-8", "4", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "0", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "-1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "1", "63", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "-1", "63", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "0", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "9223372036854775807", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "-9223372036854775808", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "9223372036854775807", "63", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "-9223372036854775808", "63", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "2147483647", "32", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "-2147483648", "32", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "0", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "1", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "1", "31", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "0", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "2147483647", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "4294967295", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "32767", "16", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "0", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "1", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "1", "15", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "0", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "32767", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "65535", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "127", "8", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "0", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "1", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "1", "7", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "0", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "127", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "255", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "7", "4", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "0", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "1", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "1", "63", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "0", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "9223372036854775807", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "18446744073709551615", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "2147483647", "32", "ulong", null)]
        public virtual void Shl(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Shl", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 733
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 734
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 735
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 736
 testRunner.When(string.Format("Two integers \'{0}\' and \'{1}\' of integer type \'{2}\' are left bitshifted", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 737
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Shr")]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "0", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "-1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "1", "31", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "-1", "31", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "0", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "2147483647", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "-2147483648", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "2147483647", "31", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "-2147483648", "31", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "32767", "16", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Bitwise", "-32768", "16", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "0", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "-1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "1", "15", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "-1", "15", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "0", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "32767", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "-32768", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "32767", "15", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "-32768", "15", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "127", "8", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Bitwise", "-128", "8", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "0", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "-1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "1", "7", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "-1", "7", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "0", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "127", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "-128", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "127", "7", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "-128", "7", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "7", "4", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Bitwise", "-8", "4", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "0", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "-1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "1", "63", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "-1", "63", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "0", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "9223372036854775807", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "-9223372036854775808", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "9223372036854775807", "63", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "-9223372036854775808", "63", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "2147483647", "32", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Bitwise", "-2147483648", "32", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "0", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "1", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "1", "31", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "0", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "2147483647", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "4294967295", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Bitwise", "32767", "16", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "0", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "1", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "1", "15", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "0", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "32767", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "65535", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Bitwise", "127", "8", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "0", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "1", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "1", "7", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "0", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "127", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "255", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Bitwise", "7", "4", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "0", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "1", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "1", "63", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "0", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "9223372036854775807", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "18446744073709551615", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Bitwise", "2147483647", "32", "ulong", null)]
        public virtual void Shr(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Shr", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 822
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 823
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 824
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 825
 testRunner.When(string.Format("Two integers \'{0}\' and \'{1}\' of integer type \'{2}\' are right bitshifted", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 826
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("And comparison")]
        [NUnit.Framework.TestCaseAttribute("BoolConditions", "true", "false", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolConditions", "false", "false", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolConditions", "false", "true", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolConditions", "true", "true", "bool", null)]
        public virtual void AndComparison(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("And comparison", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 906
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 907
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 908
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 909
 testRunner.When(string.Format("Two booleans \'{0}\' and \'{1}\' of integer type \'{2}\' are conditionally anded", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 910
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Or comparison")]
        [NUnit.Framework.TestCaseAttribute("BoolConditions", "true", "false", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolConditions", "false", "false", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolConditions", "false", "true", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolConditions", "true", "true", "bool", null)]
        public virtual void OrComparison(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Or comparison", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 918
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 919
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 920
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 921
 testRunner.When(string.Format("Two booleans \'{0}\' and \'{1}\' of integer type \'{2}\' are conditionally ored", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 922
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals comparison")]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "0", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-1", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "1", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "0", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "1", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "0", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-1", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "2147483647", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-2147483648", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "2147483647", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-2147483648", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "32767", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-32768", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "32767", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-32768", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "0", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-1", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "1", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "0", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "1", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "0", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-1", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "32767", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-32768", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "32767", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-32768", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "127", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-128", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "127", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-128", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "0", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-1", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "1", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "0", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "1", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "0", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-1", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "127", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-128", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "127", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-128", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "7", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-8", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "7", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-8", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "0", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-1", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "1", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "0", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "1", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "0", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-1", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "9223372036854775807", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-9223372036854775808", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "9223372036854775807", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-9223372036854775808", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "2147483647", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-2147483648", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "2147483647", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-2147483648", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "0", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "1", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "1", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "0", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "2147483647", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "4294967295", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "32767", "65536", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "0", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "1", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "1", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "0", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "32767", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "65535", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "127", "256", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "0", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "1", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "1", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "0", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "127", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "255", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "7", "16", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "0", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "1", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "1", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "0", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "9223372036854775807", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "18446744073709551615", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "2147483647", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BoolConditions", "true", "false", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolConditions", "false", "false", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolConditions", "false", "true", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolConditions", "true", "true", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "0", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "1", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-1", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "1", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-1", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "0", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "1", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "0", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-1", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "92233720368547758070", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-92233720368547758080", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "92233720368547758070", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-92233720368547758080", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "2147483647", "92233720368547758070", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-2147483648", "92233720368547758070", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "2147483647", "-92233720368547758080", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-2147483648", "-92233720368547758080", "BigInteger", null)]
        public virtual void EqualsComparison(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals comparison", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 932
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 933
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 934
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 935
 testRunner.When(string.Format("Two integers \'{0}\' and \'{1}\' of integer type \'{2}\' are compared for equality", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 936
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Not equals comparison")]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "0", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-1", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "1", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "0", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "1", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "0", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-1", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "2147483647", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-2147483648", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "2147483647", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-2147483648", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "32767", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-32768", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "32767", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-32768", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "0", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-1", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "1", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "0", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "1", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "0", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-1", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "32767", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-32768", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "32767", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-32768", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "127", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-128", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "127", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-128", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "0", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-1", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "1", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "0", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "1", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "0", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-1", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "127", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-128", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "127", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-128", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "7", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-8", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "7", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-8", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "0", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-1", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "1", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "0", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "1", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "0", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-1", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "9223372036854775807", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-9223372036854775808", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "9223372036854775807", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-9223372036854775808", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "2147483647", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-2147483648", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "2147483647", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-2147483648", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "0", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "1", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "1", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "0", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "2147483647", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "4294967295", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "32767", "65536", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "0", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "1", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "1", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "0", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "32767", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "65535", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "127", "256", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "0", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "1", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "1", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "0", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "127", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "255", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "7", "16", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "0", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "1", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "1", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "0", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "9223372036854775807", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "18446744073709551615", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "2147483647", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BoolConditions", "true", "false", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolConditions", "false", "false", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolConditions", "false", "true", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolConditions", "true", "true", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "0", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "1", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-1", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "1", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-1", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "0", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "1", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "0", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-1", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "92233720368547758070", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-92233720368547758080", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "92233720368547758070", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-92233720368547758080", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "2147483647", "92233720368547758070", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-2147483648", "92233720368547758070", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "2147483647", "-92233720368547758080", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-2147483648", "-92233720368547758080", "BigInteger", null)]
        public virtual void NotEqualsComparison(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Not equals comparison", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1061
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1062
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1063
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1064
 testRunner.When(string.Format("Two integers \'{0}\' and \'{1}\' of integer type \'{2}\' are compared for inequality", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1065
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Greater comparison")]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "0", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-1", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "1", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "0", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "1", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "0", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-1", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "2147483647", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-2147483648", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "2147483647", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-2147483648", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "32767", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-32768", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "32767", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-32768", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "0", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-1", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "1", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "0", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "1", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "0", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-1", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "32767", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-32768", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "32767", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-32768", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "127", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-128", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "127", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-128", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "0", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-1", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "1", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "0", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "1", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "0", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-1", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "127", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-128", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "127", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-128", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "7", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-8", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "7", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-8", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "0", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-1", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "1", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "0", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "1", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "0", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-1", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "9223372036854775807", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-9223372036854775808", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "9223372036854775807", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-9223372036854775808", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "2147483647", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-2147483648", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "2147483647", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-2147483648", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "0", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "1", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "1", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "0", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "2147483647", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "4294967295", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "32767", "65536", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "0", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "1", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "1", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "0", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "32767", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "65535", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "127", "256", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "0", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "1", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "1", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "0", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "127", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "255", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "7", "16", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "0", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "1", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "1", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "0", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "9223372036854775807", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "18446744073709551615", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "2147483647", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "0", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "1", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-1", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "1", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-1", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "0", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "1", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "0", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-1", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "92233720368547758070", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-92233720368547758080", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "92233720368547758070", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-92233720368547758080", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "2147483647", "92233720368547758070", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-2147483648", "92233720368547758070", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "2147483647", "-92233720368547758080", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-2147483648", "-92233720368547758080", "BigInteger", null)]
        public virtual void GreaterComparison(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Greater comparison", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1188
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1189
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1190
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1191
 testRunner.When(string.Format("Two integers \'{0}\' and \'{1}\' of integer type \'{2}\' are compared for greater than", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1192
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Less Than comparison")]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "0", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-1", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "1", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "0", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "1", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "0", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-1", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "2147483647", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-2147483648", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "2147483647", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-2147483648", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "32767", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-32768", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "32767", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-32768", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "0", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-1", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "1", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "0", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "1", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "0", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-1", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "32767", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-32768", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "32767", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-32768", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "127", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-128", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "127", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-128", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "0", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-1", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "1", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "0", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "1", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "0", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-1", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "127", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-128", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "127", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-128", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "7", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-8", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "7", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-8", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "0", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-1", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "1", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "0", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "1", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "0", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-1", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "9223372036854775807", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-9223372036854775808", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "9223372036854775807", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-9223372036854775808", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "2147483647", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-2147483648", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "2147483647", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-2147483648", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "0", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "1", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "1", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "0", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "2147483647", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "4294967295", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "32767", "65536", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "0", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "1", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "1", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "0", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "32767", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "65535", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "127", "256", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "0", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "1", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "1", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "0", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "127", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "255", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "7", "16", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "0", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "1", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "1", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "0", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "9223372036854775807", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "18446744073709551615", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "2147483647", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "0", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "1", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-1", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "1", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-1", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "0", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "1", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "0", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-1", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "92233720368547758070", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-92233720368547758080", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "92233720368547758070", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-92233720368547758080", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "2147483647", "92233720368547758070", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-2147483648", "92233720368547758070", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "2147483647", "-92233720368547758080", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-2147483648", "-92233720368547758080", "BigInteger", null)]
        public virtual void LessThanComparison(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Less Than comparison", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1311
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1312
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1313
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1314
 testRunner.When(string.Format("Two integers \'{0}\' and \'{1}\' of integer type \'{2}\' are compared for less than", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1315
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Greater Than Or Equals comparison")]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "0", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-1", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "1", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "0", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "1", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "0", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-1", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "2147483647", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-2147483648", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "2147483647", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-2147483648", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "32767", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-32768", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "32767", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-32768", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "0", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-1", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "1", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "0", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "1", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "0", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-1", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "32767", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-32768", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "32767", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-32768", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "127", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-128", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "127", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-128", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "0", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-1", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "1", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "0", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "1", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "0", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-1", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "127", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-128", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "127", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-128", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "7", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-8", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "7", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-8", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "0", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-1", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "1", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "0", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "1", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "0", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-1", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "9223372036854775807", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-9223372036854775808", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "9223372036854775807", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-9223372036854775808", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "2147483647", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-2147483648", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "2147483647", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-2147483648", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "0", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "1", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "1", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "0", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "2147483647", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "4294967295", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "32767", "65536", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "0", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "1", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "1", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "0", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "32767", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "65535", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "127", "256", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "0", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "1", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "1", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "0", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "127", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "255", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "7", "16", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "0", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "1", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "1", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "0", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "9223372036854775807", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "18446744073709551615", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "2147483647", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "0", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "1", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-1", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "1", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-1", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "0", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "1", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "0", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-1", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "92233720368547758070", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-92233720368547758080", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "92233720368547758070", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-92233720368547758080", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "2147483647", "92233720368547758070", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-2147483648", "92233720368547758070", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "2147483647", "-92233720368547758080", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-2147483648", "-92233720368547758080", "BigInteger", null)]
        public virtual void GreaterThanOrEqualsComparison(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Greater Than Or Equals comparison", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1433
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1434
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1435
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1436
 testRunner.When(string.Format("Two integers \'{0}\' and \'{1}\' of integer type \'{2}\' are compared for greater than " +
                            "orequals", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1437
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Less Than Or Equals comparison")]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "0", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-1", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "1", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-1", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "0", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "1", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "0", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-1", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "2147483647", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-2147483648", "1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "2147483647", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-2147483648", "-1", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "32767", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-32768", "65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "32767", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Conditions", "-32768", "-65536", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "0", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-1", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "1", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-1", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "0", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "1", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "0", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-1", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "32767", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-32768", "1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "32767", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-32768", "-1", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "127", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-128", "256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "127", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Conditions", "-128", "-256", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "0", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-1", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "1", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-1", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "0", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "1", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "0", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-1", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "127", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-128", "1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "127", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-128", "-1", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "7", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-8", "16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "7", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Conditions", "-8", "-16", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "0", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-1", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "1", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-1", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "0", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "1", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "0", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-1", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "9223372036854775807", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-9223372036854775808", "1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "9223372036854775807", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-9223372036854775808", "-1", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "2147483647", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-2147483648", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "2147483647", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Conditions", "-2147483648", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "0", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "1", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "1", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "0", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "2147483647", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "4294967295", "1", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Conditions", "32767", "65536", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "0", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "1", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "1", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "0", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "32767", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "65535", "1", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Conditions", "127", "256", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "0", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "1", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "1", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "0", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "127", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "255", "1", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Conditions", "7", "16", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "0", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "1", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "1", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "0", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "9223372036854775807", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "18446744073709551615", "1", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Conditions", "2147483647", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "0", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "1", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-1", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "1", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-1", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "0", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "1", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "0", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-1", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "92233720368547758070", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-92233720368547758080", "1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "92233720368547758070", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-92233720368547758080", "-1", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "2147483647", "9223372036854775807", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-2147483648", "9223372036854775807", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "2147483647", "-9223372036854775808", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntConditions", "-2147483648", "-9223372036854775808", "BigInteger", null)]
        public virtual void LessThanOrEqualsComparison(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Less Than Or Equals comparison", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1555
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1556
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1557
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1558
 testRunner.When(string.Format("Two integers \'{0}\' and \'{1}\' of integer type \'{2}\' are compared for less than or " +
                            "equals", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1559
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unary Postfix Increment")]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "10", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "-10", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "-2147483648", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "2147483647", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "10", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "-10", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "-32768", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "32767", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "10", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "-10", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "-128", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "127", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "10", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "-10", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "10", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "2147483647", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "4294967295", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "10", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "32767", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "65535", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "10", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "127", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "255", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "10", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "18446744073709551615", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "-10", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "-92233720368547758080", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "92233720368547758070", "BigInteger", null)]
        public virtual void UnaryPostfixIncrement(string tC, string a, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unary Postfix Increment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1679
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1680
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1681
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1682
 testRunner.When(string.Format("An integer \'{0}\' of integer type \'{1}\' has postfix increment applied", a, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1683
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unary Postfix Decrement")]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "10", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "-10", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "-2147483648", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "2147483647", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "10", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "-10", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "-32768", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "32767", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "10", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "-10", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "-128", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "127", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "10", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "-10", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "10", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "2147483647", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "4294967295", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "10", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "32767", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "65535", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "10", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "127", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "255", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "10", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "18446744073709551615", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "-10", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "-92233720368547758080", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "92233720368547758070", "BigInteger", null)]
        public virtual void UnaryPostfixDecrement(string tC, string a, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unary Postfix Decrement", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1730
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1731
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1732
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1733
 testRunner.When(string.Format("An integer \'{0}\' of integer type \'{1}\' has postfix decrement applied", a, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1734
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unary Prefix Increment")]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "10", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "-10", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "-2147483648", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "2147483647", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "10", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "-10", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "-32768", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "32767", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "10", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "-10", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "-128", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "127", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "10", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "-10", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "10", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "2147483647", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "4294967295", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "10", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "32767", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "65535", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "10", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "127", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "255", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "10", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "18446744073709551615", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "-10", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "-92233720368547758080", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "92233720368547758070", "BigInteger", null)]
        public virtual void UnaryPrefixIncrement(string tC, string a, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unary Prefix Increment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1781
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1782
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1783
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1784
 testRunner.When(string.Format("An integer \'{0}\' of integer type \'{1}\' has prefix increment applied", a, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1785
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unary Prefix Decrement")]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "10", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "-10", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "-2147483648", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "2147483647", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "10", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "-10", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "-32768", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "32767", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "10", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "-10", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "-128", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "127", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "10", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "-10", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "10", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "2147483647", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "4294967295", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "10", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "32767", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "65535", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "10", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "127", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "255", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "10", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "18446744073709551615", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "-10", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "-92233720368547758080", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "92233720368547758070", "BigInteger", null)]
        public virtual void UnaryPrefixDecrement(string tC, string a, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unary Prefix Decrement", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1835
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1836
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1837
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1838
 testRunner.When(string.Format("An integer \'{0}\' of integer type \'{1}\' has prefix decrement applied", a, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1839
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unary Plus")]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "10", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "-10", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "-2147483648", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "2147483647", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "10", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "-10", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "-32768", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "32767", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "10", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "-10", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "-128", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "127", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "10", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "-10", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "10", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "2147483647", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "4294967295", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "10", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "32767", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "65535", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "10", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "127", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "255", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "10", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "18446744073709551615", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "-10", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "-92233720368547758080", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "92233720368547758070", "BigInteger", null)]
        public virtual void UnaryPlus(string tC, string a, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unary Plus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1889
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1890
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1891
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1892
 testRunner.When(string.Format("An integer \'{0}\' of integer type \'{1}\' has unary plus applied", a, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1893
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unary Minus")]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "10", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "-10", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "-2147483648", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "2147483647", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "10", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "-10", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "-32768", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "32767", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "10", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "-10", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "-128", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "127", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "10", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "-10", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "10", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "2147483647", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "4294967295", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "10", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "32767", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "65535", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "10", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "127", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "255", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "10", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "18446744073709551615", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "-10", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "-92233720368547758080", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "92233720368547758070", "BigInteger", null)]
        public virtual void UnaryMinus(string tC, string a, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unary Minus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1943
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1944
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1945
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1946
 testRunner.When(string.Format("An integer \'{0}\' of integer type \'{1}\' has unary minus applied", a, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1947
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unary Not")]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "10", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "0", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "-10", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "-2147483648", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int32Unary", "2147483647", "int", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "10", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "0", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "-10", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "-32768", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int16Unary", "32767", "short", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "10", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "0", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "-10", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "-128", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int8Unary", "127", "sbyte", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "10", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "0", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "-10", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "-9223372036854775808", "long", null)]
        [NUnit.Framework.TestCaseAttribute("Int64Unary", "9223372036854775807", "long", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "10", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "0", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "2147483647", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt32Unary", "4294967295", "uint", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "10", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "0", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "32767", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt16Unary", "65535", "ushort", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "10", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "0", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "127", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt8Unary", "255", "byte", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "10", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "0", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "9223372036854775807", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("UInt64Unary", "18446744073709551615", "ulong", null)]
        [NUnit.Framework.TestCaseAttribute("BoolUnary", "true", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BoolUnary", "false", "bool", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "0", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "-10", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "-92233720368547758080", "BigInteger", null)]
        [NUnit.Framework.TestCaseAttribute("BigIntUnary", "92233720368547758070", "BigInteger", null)]
        public virtual void UnaryNot(string tC, string a, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unary Not", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1995
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1996
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1997
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1998
 testRunner.When(string.Format("An integer \'{0}\' of integer type \'{1}\' has unary not applied", a, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1999
 testRunner.Then("The integer result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
