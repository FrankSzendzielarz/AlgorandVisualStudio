// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AlgoStudio.SpecFlow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DecimalTypeSupport")]
    public partial class DecimalTypeSupportFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "DecimalTypeSupport.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "DecimalTypeSupport", "\tAs a developer\r\n\tI want to use Floating Point Decimal \r\n\tSo that I can have a wi" +
                    "de range of precise values for finance and acConvert decimal to bytes\r\n\r\n\tTODOs:" +
                    " Add all casting tests", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert decimal to bytes")]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", null)]
        public virtual void ConvertDecimalToBytes(string tC, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert decimal to bytes", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.When("the convert decimals to bytes method is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
 testRunner.Then("the returned value is a byte array that can be converted back to a decimal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert bytes to decimal")]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", null)]
        public virtual void ConvertBytesToDecimal(string tC, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert bytes to decimal", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.When("the convert bytes to decimal method is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
 testRunner.Then("the returned value is a decimal that matches the original value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert decimal to bytes and back")]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", null)]
        public virtual void ConvertDecimalToBytesAndBack(string tC, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert decimal to bytes and back", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.When("the convert to bytes and back again method is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.Then("the exact same decimal is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert bytes to decimal and back")]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", null)]
        public virtual void ConvertBytesToDecimalAndBack(string tC, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert bytes to decimal and back", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 39
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.When("the convert from bytes to decimal and back again method is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then("the exact same bytes are returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unary PreIncrement")]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0000000000000000000000000001", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0000000000000000000000000001", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0000000000000000000000000006", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "1111111111111111111111111111", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "111111111111111111111111111.4", null)]
        public virtual void UnaryPreIncrement(string tC, string a, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unary PreIncrement", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 50
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.When(string.Format("The number \'{0}\' is pre-incremented", a), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.Then("The bool result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unary PostIncrement")]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0000000000000000000000000001", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0000000000000000000000000001", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0000000000000000000000000006", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "1111111111111111111111111111", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "111111111111111111111111111.4", null)]
        public virtual void UnaryPostIncrement(string tC, string a, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unary PostIncrement", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 70
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 71
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
 testRunner.When(string.Format("The number \'{0}\' is post-incremented", a), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
 testRunner.Then("The bool result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unary PreDecrement")]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0000000000000000000000000001", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0000000000000000000000000001", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0000000000000000000000000006", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "1111111111111111111111111111", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "111111111111111111111111111.4", null)]
        public virtual void UnaryPreDecrement(string tC, string a, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unary PreDecrement", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 89
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 90
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
 testRunner.When(string.Format("The number \'{0}\' is pre-decremented", a), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 92
 testRunner.Then("The bool result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unary PostDecrement")]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0000000000000000000000000001", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0000000000000000000000000001", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0000000000000000000000000006", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "1111111111111111111111111111", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalUnarySupport", "111111111111111111111111111.4", null)]
        public virtual void UnaryPostDecrement(string tC, string a, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unary PostDecrement", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 108
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 109
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 110
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
 testRunner.When(string.Format("The number \'{0}\' is post-decremented", a), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 112
 testRunner.Then("The bool result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Addition")]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "0.0000000000000000000000000001", "0.0000000000000000000000000001", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "0.0000000000000000000000000001", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "0.0000000000000000000000000001", "0.0000000000000000000000000002", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "0.0000000000000000000000000006", "0.0000000000000000000000000006", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "1.0", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "0.0", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "1111111111111111111111111111", "1111111111111111111111111111", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "0.0", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "-1.0", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "-1.0", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "111111111111111111111111111.4", "111111111111111111111111111.8", null)]
        public virtual void Addition(string tC, string a, string b, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Addition", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 127
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 128
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 129
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
 testRunner.When(string.Format("Two numbers \'{0}\' and \'{1}\' are added", a, b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 131
 testRunner.Then("The result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiplication")]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "1.0", "2.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "0.1", "10.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "0.333", "3.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "0.5", "3.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "0.1", "3.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "0.05", "3.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "3.0", "0.333", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "3.0", "30.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "30.0", "0.333", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "300.0", "0.333", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "1.23456789123456789", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "1.23456789123456789", "3.33", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "0.0000000000000000000000000001", "10000000000000000000000000000.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "79228162514264337593543950335", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "79228162514264337593543950335", "2.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "-79228162514264337593543950335", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "-79228162514264337593543950335", "1.0", null)]
        public virtual void Multiplication(string tC, string a, string b, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplication", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 149
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 150
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 151
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 152
 testRunner.When(string.Format("Two numbers \'{0}\' and \'{1}\' are multiplied", a, b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 153
 testRunner.Then("The result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Division")]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "1.0", "2.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "10.0", "0.1", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "3.0", "0.333", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "0.333", "3", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "1.23456789123456789", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "10000000000000000000000000000.0", "0.0000000000000000000000000001", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "79228162514264337593543950335.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "-79228162514264337593543950335.0", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "-79228162514264337593543950335.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "1.0", "0.0", null)]
        public virtual void Division(string tC, string a, string b, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Division", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 174
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 175
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 176
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 177
 testRunner.When(string.Format("Two numbers \'{0}\' and \'{1}\' are divided", a, b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 178
 testRunner.Then("The result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtraction")]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "1.0", "2.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "10.0", "0.1", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "3.0", "0.333", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "1.23456789123456789", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "10000000000000000000000000000.0", "0.0000000000000000000000000001", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "79228162514264337593543950335.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "-79228162514264337593543950335.0", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "-79228162514264337593543950335.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "79228162514264337593543950335.0", "100.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "-79228162514264337593543950335.0", "-100.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "-79228162514264337593543950335.0", "100.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "1.0", "0.0", null)]
        public virtual void Subtraction(string tC, string a, string b, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtraction", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 194
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 195
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 196
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 197
 testRunner.When(string.Format("Two numbers \'{0}\' and \'{1}\' are subtracted", a, b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 198
 testRunner.Then("The result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Complex Expressions")]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "1.0", "1.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "0.0", "0.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "-1.0", "-1.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "0.1", "10.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "3.0", "0.333", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "1.23456789123456789", "1.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "10000000000000000000000000000.0", "0.0000000000000000000000000001", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "79228162514264337593543950335.0", "1.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "-79228162514264337593543950335.0", "-1.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalArithmeticSupport", "-79228162514264337593543950335.0", "1.0", "1.0", null)]
        public virtual void ComplexExpressions(string tC, string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complex Expressions", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 214
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 215
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 216
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 217
 testRunner.And("a deployed opup contract", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
 testRunner.When(string.Format("Three numbers \'{0}\' and \'{1}\' and \'{2}\' are used as input to a complex expression" +
                            "", a, b, c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 219
 testRunner.Then("The result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Addition Casted To Ulong")]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "0.0000000000000000000000000001", "0.0000000000000000000000000001", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "0.0000000000000000000000000001", "0.0000000000000000000000000002", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "0.0000000000000000000000000006", "0.0000000000000000000000000006", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "1.0", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "0.0", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "18446744073709551615", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "50.0", "50.0000000", null)]
        public virtual void AdditionCastedToUlong(string tC, string a, string b, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Addition Casted To Ulong", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 234
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 235
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 236
 testRunner.And("a deployed opup contract", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 237
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 238
 testRunner.When(string.Format("Two numbers \'{0}\' and \'{1}\' are added and casted to ulong", a, b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 239
 testRunner.Then("The ulong result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtraction Casted To Ulong")]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "10.0", "0.1", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "3.0", "0.333", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "1.23456789123456789", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "10000000000000000000000000000.0", "0.0000000000000000000000000001", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "79228162514264337593543950335.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "1.0", "0.0", null)]
        public virtual void SubtractionCastedToUlong(string tC, string a, string b, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtraction Casted To Ulong", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 254
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 255
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 256
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 257
 testRunner.When(string.Format("Two numbers \'{0}\' and \'{1}\' are subtracted and cast to ulong", a, b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 258
 testRunner.Then("The ulong result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiplication Casted To Ulong")]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "1.0", "2.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "0.1", "10.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "0.333", "3.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "3.0", "0.333", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "6.0", "0.333", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "1.23456789123456789", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "1.23456789123456789", "3.33", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "0.0000000000000000000000000001", "10000000000000000000000000000.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "79228162514264337593543950335", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "79228162514264337593543950335", "2.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "-79228162514264337593543950335", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "-79228162514264337593543950335", "1.0", null)]
        public virtual void MultiplicationCastedToUlong(string tC, string a, string b, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplication Casted To Ulong", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 268
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 269
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 270
 testRunner.And("a deployed opup contract", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 271
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 272
 testRunner.When(string.Format("Two numbers \'{0}\' and \'{1}\' are multiplied and cast to ulong", a, b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 273
 testRunner.Then("The ulong result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Division Casted To Ulong")]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "1.0", "2.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "10.0", "0.1", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "3.0", "0.333", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "0.333", "3", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "1.23456789123456789", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "10000000000000000000000000000.0", "0.0000000000000000000000000001", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "79228162514264337593543950335.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "-79228162514264337593543950335.0", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "-79228162514264337593543950335.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalCastTypeSupport", "1.0", "0.0", null)]
        public virtual void DivisionCastedToUlong(string tC, string a, string b, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Division Casted To Ulong", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 289
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 290
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 291
 testRunner.And("a deployed opup contract", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 292
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 293
 testRunner.When(string.Format("Two numbers \'{0}\' and \'{1}\' are divided and cast to ulong", a, b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 294
 testRunner.Then("The ulong result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals")]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "1.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-1.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "0.0", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-0.0", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "0.0", "-0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "1.0", "2.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "2.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-2.0", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-1.0", "-2.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "123.0", "123.000", null)]
        public virtual void Equals(string tC, string a, string b, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 308
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 309
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 310
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 311
 testRunner.When(string.Format("Two numbers \'{0}\' and \'{1}\' are compared for equality", a, b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 312
 testRunner.Then("The bool result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Not Equals")]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "1.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-1.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "0.0", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-0.0", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "0.0", "-0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "1.0", "2.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "2.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-2.0", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-1.0", "-2.0", null)]
        public virtual void NotEquals(string tC, string a, string b, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Not Equals", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 326
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 327
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 328
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 329
 testRunner.When(string.Format("Two numbers \'{0}\' and \'{1}\' are compared for inequality", a, b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 330
 testRunner.Then("The bool result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Greater Than")]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "1.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-1.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "0.0", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-0.0", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "0.0", "-0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "1.0", "2.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "2.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-2.0", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-1.0", "-2.0", null)]
        public virtual void GreaterThan(string tC, string a, string b, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Greater Than", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 343
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 344
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 345
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 346
 testRunner.When(string.Format("Two numbers \'{0}\' and \'{1}\' are compared for greater than", a, b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 347
 testRunner.Then("The bool result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Less Than")]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "1.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-1.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "0.0", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-0.0", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "0.0", "-0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "1.0", "2.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "2.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-2.0", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-1.0", "-2.0", null)]
        public virtual void LessThan(string tC, string a, string b, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Less Than", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 360
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 361
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 362
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 363
 testRunner.When(string.Format("Two numbers \'{0}\' and \'{1}\' are compared for less than", a, b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 364
 testRunner.Then("The bool result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Greater Than Or Equal To")]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "1.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-1.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "1.0", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "0.0", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-0.0", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "0.0", "-0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "1.0", "2.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "2.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-2.0", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-1.0", "-2.0", null)]
        public virtual void GreaterThanOrEqualTo(string tC, string a, string b, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Greater Than Or Equal To", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 377
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 378
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 379
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 380
 testRunner.When(string.Format("Two numbers \'{0}\' and \'{1}\' are compared for greater than or equal to", a, b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 381
 testRunner.Then("The bool result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Less Than Or Equal To")]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "1.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "1.0", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-1.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "0.0", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-0.0", "0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "0.0", "-0.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "1.0", "2.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "2.0", "1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-2.0", "-1.0", null)]
        [NUnit.Framework.TestCaseAttribute("DecimalConditionsSupport", "-1.0", "-2.0", null)]
        public virtual void LessThanOrEqualTo(string tC, string a, string b, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TC", tC);
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Less Than Or Equal To", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 395
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 396
 testRunner.Given("a sandbox connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 397
 testRunner.And(string.Format("a deployed test contract called {0}", tC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 398
 testRunner.When(string.Format("Two numbers \'{0}\' and \'{1}\' are compared for less than or equal to", a, b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 399
 testRunner.Then("The bool result is the same as C# would calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
