using Algorand;
using Algorand.Algod;
using Algorand.Algod.Model;
using AlgoStudio.Clients;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using System.Collections.Generic;

namespace AlgorandWebAppTemplate.Pages
{

    public class SmartContractsModel : PageModel
    {
        private readonly ILogger<SmartContractsModel> _logger;
        private readonly IDefaultApi _algorand;
        private readonly Account _creator;

        public string Error { get; set; } = "";
        public bool Deployed { get; set; } = false;
        public bool DeployedError { get; set; } = false;
        [BindProperty]
        public ulong AddNumbersAppId { get; set; }
        [BindProperty]
        public ulong LimitNumberAppId { get; set; }

        [BindProperty]
        public long Number1 { get; set; }
        [BindProperty]
        public long Number2 { get; set; }
        [BindProperty]
        public long Limit { get; set; }

        public long CallCounter { get; private set; }

        public long LimitedResult { get; private set; }



        public SmartContractsModel(ILogger<SmartContractsModel> logger, IDefaultApi defaultApi)
        {
            _logger = logger;
            _algorand = defaultApi;

            //After starting sandbox, run
            //  ./sandbox goal account list
            //to get the active accounts
            //and then run
            //  ./sandbox goal account export -a <one of the above addresses>
            //to find a mnemonic to a private key:
            string creatorMnemonic = "camera exotic connect style use window develop donkey admit trend bracket test scissors envelope rail trade month now recall post odor lizard price absorb cage";


            _creator = new Account(creatorMnemonic);
        }

        public void OnGet()
        {

        }

        public async Task OnPostDeploy()
        {
            DeployedError = false;
            Deployed = false;

            try
            {
                var add2Numbers = new AddTwoNumbers.AddTwoNumbers();
                var id = await add2Numbers.Deploy(_creator, _algorand as DefaultApi);
                if (id.HasValue)
                {
                    AddNumbersAppId = id.Value;
                }
                else
                {
                    DeployedError = true;
                    Error = "No app id returned for AddTwoNumbers app.";
                }


                var limitNumbers = new LimitNumber.LimitNumber();
                id = await limitNumbers.Deploy(_creator, _algorand as DefaultApi);
                if (id.HasValue)
                {
                    LimitNumberAppId = id.Value;
                }
                else
                {
                    DeployedError = true;
                    Error = "No app id returned for LimitNumber app.";
                }

                Deployed = true;
            }
            catch (ApiException<ErrorResponse> ex)
            {
                DeployedError = true;
                Error = ex.Result.Message;
            }

        }

        public async Task OnPostAdd()
        {
            DeployedError = false;
            Deployed = true ;
            try
            {
                // The proxy is generated by right clicking in the smart contract editor window
                // and pressing Generate Smart Contract Proxy
                var proxy = new ContractClient.AddTwoNumbersProxy((DefaultApi)_algorand, AddNumbersAppId);

                try
                {
                    LimitedResult = await proxy.AddTwoWithLimit(_creator, 2000, LimitNumberAppId, Number1, Number2, Limit, "");
                    CallCounter = await proxy.CallCounter();
                }
                catch (Exception ex)
                {
                    Error = "Exception occured.";
                }

            }
            catch (ApiException<ErrorResponse> ex)
            {
                System.Diagnostics.Debug.WriteLine("Exception when calling:" + ex.Result.Message);
            }
        }
    }
}