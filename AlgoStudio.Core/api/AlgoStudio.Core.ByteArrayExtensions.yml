### YamlMime:ManagedReference
items:
- uid: AlgoStudio.Core.ByteArrayExtensions
  commentId: T:AlgoStudio.Core.ByteArrayExtensions
  id: ByteArrayExtensions
  parent: AlgoStudio.Core
  children:
  - AlgoStudio.Core.ByteArrayExtensions.BitLen(System.Byte[])
  - AlgoStudio.Core.ByteArrayExtensions.Concat(System.Byte[],System.Byte[])
  - AlgoStudio.Core.ByteArrayExtensions.GetBit(System.Byte[],System.UInt64)
  - AlgoStudio.Core.ByteArrayExtensions.Init(System.Byte[],System.Byte,System.UInt32)
  - AlgoStudio.Core.ByteArrayExtensions.Part(System.Byte[],System.UInt32,System.UInt32)
  - AlgoStudio.Core.ByteArrayExtensions.Replace(System.Byte[],System.Byte,System.Byte[])
  - AlgoStudio.Core.ByteArrayExtensions.ToAccountReference(System.Byte[])
  - AlgoStudio.Core.ByteArrayExtensions.ToString(System.Byte[])
  - AlgoStudio.Core.ByteArrayExtensions.ToTealUlong(System.Byte[])
  langs:
  - csharp
  - vb
  name: ByteArrayExtensions
  nameWithType: ByteArrayExtensions
  fullName: AlgoStudio.Core.ByteArrayExtensions
  type: Class
  source:
    remote:
      path: AlgoStudio.Core/ByteArrayExtensions.cs
      branch: MigrateTests
      repo: https://frankstech@dev.azure.com/frankstech/Algorand%20for%20Visual%20Studio/_git/Algorand%20for%20Visual%20Studio
    id: ByteArrayExtensions
    path: ../../AlgoStudio/AlgoStudio.Core/ByteArrayExtensions.cs
    startLine: 8
  assemblies:
  - AlgoStudio - Backup.Core
  namespace: AlgoStudio.Core
  syntax:
    content: public static class ByteArrayExtensions
    content.vb: Public Module ByteArrayExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: AlgoStudio.Core.ByteArrayExtensions.Concat(System.Byte[],System.Byte[])
  commentId: M:AlgoStudio.Core.ByteArrayExtensions.Concat(System.Byte[],System.Byte[])
  id: Concat(System.Byte[],System.Byte[])
  isExtensionMethod: true
  parent: AlgoStudio.Core.ByteArrayExtensions
  langs:
  - csharp
  - vb
  name: Concat(Byte[], Byte[])
  nameWithType: ByteArrayExtensions.Concat(Byte[], Byte[])
  fullName: AlgoStudio.Core.ByteArrayExtensions.Concat(System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: AlgoStudio.Core/ByteArrayExtensions.cs
      branch: MigrateTests
      repo: https://frankstech@dev.azure.com/frankstech/Algorand%20for%20Visual%20Studio/_git/Algorand%20for%20Visual%20Studio
    id: Concat
    path: ../../AlgoStudio/AlgoStudio.Core/ByteArrayExtensions.cs
    startLine: 16
  assemblies:
  - AlgoStudio - Backup.Core
  namespace: AlgoStudio.Core
  summary: "\nConc\n"
  example: []
  syntax:
    content: public static byte[] Concat(this byte[] a, byte[] b)
    parameters:
    - id: a
      type: System.Byte[]
      description: ''
    - id: b
      type: System.Byte[]
    return:
      type: System.Byte[]
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Concat(a As Byte(), b As Byte()) As Byte()
  overload: AlgoStudio.Core.ByteArrayExtensions.Concat*
  exceptions:
  - type: AlgoStudio.Core.IntentionallyNotImplementedException
    commentId: T:AlgoStudio.Core.IntentionallyNotImplementedException
  nameWithType.vb: ByteArrayExtensions.Concat(Byte(), Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoStudio.Core.ByteArrayExtensions.Concat(System.Byte(), System.Byte())
  name.vb: Concat(Byte(), Byte())
- uid: AlgoStudio.Core.ByteArrayExtensions.ToAccountReference(System.Byte[])
  commentId: M:AlgoStudio.Core.ByteArrayExtensions.ToAccountReference(System.Byte[])
  id: ToAccountReference(System.Byte[])
  isExtensionMethod: true
  parent: AlgoStudio.Core.ByteArrayExtensions
  langs:
  - csharp
  - vb
  name: ToAccountReference(Byte[])
  nameWithType: ByteArrayExtensions.ToAccountReference(Byte[])
  fullName: AlgoStudio.Core.ByteArrayExtensions.ToAccountReference(System.Byte[])
  type: Method
  source:
    remote:
      path: AlgoStudio.Core/ByteArrayExtensions.cs
      branch: MigrateTests
      repo: https://frankstech@dev.azure.com/frankstech/Algorand%20for%20Visual%20Studio/_git/Algorand%20for%20Visual%20Studio
    id: ToAccountReference
    path: ../../AlgoStudio/AlgoStudio.Core/ByteArrayExtensions.cs
    startLine: 18
  assemblies:
  - AlgoStudio - Backup.Core
  namespace: AlgoStudio.Core
  syntax:
    content: public static AccountReference ToAccountReference(this byte[] a)
    parameters:
    - id: a
      type: System.Byte[]
    return:
      type: AlgoStudio.Core.AccountReference
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToAccountReference(a As Byte()) As AccountReference
  overload: AlgoStudio.Core.ByteArrayExtensions.ToAccountReference*
  nameWithType.vb: ByteArrayExtensions.ToAccountReference(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoStudio.Core.ByteArrayExtensions.ToAccountReference(System.Byte())
  name.vb: ToAccountReference(Byte())
- uid: AlgoStudio.Core.ByteArrayExtensions.Part(System.Byte[],System.UInt32,System.UInt32)
  commentId: M:AlgoStudio.Core.ByteArrayExtensions.Part(System.Byte[],System.UInt32,System.UInt32)
  id: Part(System.Byte[],System.UInt32,System.UInt32)
  isExtensionMethod: true
  parent: AlgoStudio.Core.ByteArrayExtensions
  langs:
  - csharp
  - vb
  name: Part(Byte[], UInt32, UInt32)
  nameWithType: ByteArrayExtensions.Part(Byte[], UInt32, UInt32)
  fullName: AlgoStudio.Core.ByteArrayExtensions.Part(System.Byte[], System.UInt32, System.UInt32)
  type: Method
  source:
    remote:
      path: AlgoStudio.Core/ByteArrayExtensions.cs
      branch: MigrateTests
      repo: https://frankstech@dev.azure.com/frankstech/Algorand%20for%20Visual%20Studio/_git/Algorand%20for%20Visual%20Studio
    id: Part
    path: ../../AlgoStudio/AlgoStudio.Core/ByteArrayExtensions.cs
    startLine: 20
  assemblies:
  - AlgoStudio - Backup.Core
  namespace: AlgoStudio.Core
  syntax:
    content: public static byte[] Part(this byte[] a, uint start, uint end)
    parameters:
    - id: a
      type: System.Byte[]
    - id: start
      type: System.UInt32
    - id: end
      type: System.UInt32
    return:
      type: System.Byte[]
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Part(a As Byte(), start As UInteger, end As UInteger) As Byte()
  overload: AlgoStudio.Core.ByteArrayExtensions.Part*
  nameWithType.vb: ByteArrayExtensions.Part(Byte(), UInt32, UInt32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoStudio.Core.ByteArrayExtensions.Part(System.Byte(), System.UInt32, System.UInt32)
  name.vb: Part(Byte(), UInt32, UInt32)
- uid: AlgoStudio.Core.ByteArrayExtensions.Init(System.Byte[],System.Byte,System.UInt32)
  commentId: M:AlgoStudio.Core.ByteArrayExtensions.Init(System.Byte[],System.Byte,System.UInt32)
  id: Init(System.Byte[],System.Byte,System.UInt32)
  isExtensionMethod: true
  parent: AlgoStudio.Core.ByteArrayExtensions
  langs:
  - csharp
  - vb
  name: Init(Byte[], Byte, UInt32)
  nameWithType: ByteArrayExtensions.Init(Byte[], Byte, UInt32)
  fullName: AlgoStudio.Core.ByteArrayExtensions.Init(System.Byte[], System.Byte, System.UInt32)
  type: Method
  source:
    remote:
      path: AlgoStudio.Core/ByteArrayExtensions.cs
      branch: MigrateTests
      repo: https://frankstech@dev.azure.com/frankstech/Algorand%20for%20Visual%20Studio/_git/Algorand%20for%20Visual%20Studio
    id: Init
    path: ../../AlgoStudio/AlgoStudio.Core/ByteArrayExtensions.cs
    startLine: 22
  assemblies:
  - AlgoStudio - Backup.Core
  namespace: AlgoStudio.Core
  syntax:
    content: public static void Init(this byte[] a, byte b, uint l)
    parameters:
    - id: a
      type: System.Byte[]
    - id: b
      type: System.Byte
    - id: l
      type: System.UInt32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Init(a As Byte(), b As Byte, l As UInteger)
  overload: AlgoStudio.Core.ByteArrayExtensions.Init*
  nameWithType.vb: ByteArrayExtensions.Init(Byte(), Byte, UInt32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoStudio.Core.ByteArrayExtensions.Init(System.Byte(), System.Byte, System.UInt32)
  name.vb: Init(Byte(), Byte, UInt32)
- uid: AlgoStudio.Core.ByteArrayExtensions.Replace(System.Byte[],System.Byte,System.Byte[])
  commentId: M:AlgoStudio.Core.ByteArrayExtensions.Replace(System.Byte[],System.Byte,System.Byte[])
  id: Replace(System.Byte[],System.Byte,System.Byte[])
  isExtensionMethod: true
  parent: AlgoStudio.Core.ByteArrayExtensions
  langs:
  - csharp
  - vb
  name: Replace(Byte[], Byte, Byte[])
  nameWithType: ByteArrayExtensions.Replace(Byte[], Byte, Byte[])
  fullName: AlgoStudio.Core.ByteArrayExtensions.Replace(System.Byte[], System.Byte, System.Byte[])
  type: Method
  source:
    remote:
      path: AlgoStudio.Core/ByteArrayExtensions.cs
      branch: MigrateTests
      repo: https://frankstech@dev.azure.com/frankstech/Algorand%20for%20Visual%20Studio/_git/Algorand%20for%20Visual%20Studio
    id: Replace
    path: ../../AlgoStudio/AlgoStudio.Core/ByteArrayExtensions.cs
    startLine: 31
  assemblies:
  - AlgoStudio - Backup.Core
  namespace: AlgoStudio.Core
  summary: "\n\n"
  example: []
  syntax:
    content: public static void Replace(this byte[] a, byte b, byte[] c)
    parameters:
    - id: a
      type: System.Byte[]
      description: ''
    - id: b
      type: System.Byte
      description: Position to replace from
    - id: c
      type: System.Byte[]
      description: Bytes to replace with
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Replace(a As Byte(), b As Byte, c As Byte())
  overload: AlgoStudio.Core.ByteArrayExtensions.Replace*
  exceptions:
  - type: AlgoStudio.Core.IntentionallyNotImplementedException
    commentId: T:AlgoStudio.Core.IntentionallyNotImplementedException
  nameWithType.vb: ByteArrayExtensions.Replace(Byte(), Byte, Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoStudio.Core.ByteArrayExtensions.Replace(System.Byte(), System.Byte, System.Byte())
  name.vb: Replace(Byte(), Byte, Byte())
- uid: AlgoStudio.Core.ByteArrayExtensions.ToString(System.Byte[])
  commentId: M:AlgoStudio.Core.ByteArrayExtensions.ToString(System.Byte[])
  id: ToString(System.Byte[])
  isExtensionMethod: true
  parent: AlgoStudio.Core.ByteArrayExtensions
  langs:
  - csharp
  - vb
  name: ToString(Byte[])
  nameWithType: ByteArrayExtensions.ToString(Byte[])
  fullName: AlgoStudio.Core.ByteArrayExtensions.ToString(System.Byte[])
  type: Method
  source:
    remote:
      path: AlgoStudio.Core/ByteArrayExtensions.cs
      branch: MigrateTests
      repo: https://frankstech@dev.azure.com/frankstech/Algorand%20for%20Visual%20Studio/_git/Algorand%20for%20Visual%20Studio
    id: ToString
    path: ../../AlgoStudio/AlgoStudio.Core/ByteArrayExtensions.cs
    startLine: 33
  assemblies:
  - AlgoStudio - Backup.Core
  namespace: AlgoStudio.Core
  syntax:
    content: public static string ToString(this byte[] a)
    parameters:
    - id: a
      type: System.Byte[]
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToString(a As Byte()) As String
  overload: AlgoStudio.Core.ByteArrayExtensions.ToString*
  nameWithType.vb: ByteArrayExtensions.ToString(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoStudio.Core.ByteArrayExtensions.ToString(System.Byte())
  name.vb: ToString(Byte())
- uid: AlgoStudio.Core.ByteArrayExtensions.BitLen(System.Byte[])
  commentId: M:AlgoStudio.Core.ByteArrayExtensions.BitLen(System.Byte[])
  id: BitLen(System.Byte[])
  isExtensionMethod: true
  parent: AlgoStudio.Core.ByteArrayExtensions
  langs:
  - csharp
  - vb
  name: BitLen(Byte[])
  nameWithType: ByteArrayExtensions.BitLen(Byte[])
  fullName: AlgoStudio.Core.ByteArrayExtensions.BitLen(System.Byte[])
  type: Method
  source:
    remote:
      path: AlgoStudio.Core/ByteArrayExtensions.cs
      branch: MigrateTests
      repo: https://frankstech@dev.azure.com/frankstech/Algorand%20for%20Visual%20Studio/_git/Algorand%20for%20Visual%20Studio
    id: BitLen
    path: ../../AlgoStudio/AlgoStudio.Core/ByteArrayExtensions.cs
    startLine: 36
  assemblies:
  - AlgoStudio - Backup.Core
  namespace: AlgoStudio.Core
  syntax:
    content: public static int BitLen(this byte[] a)
    parameters:
    - id: a
      type: System.Byte[]
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BitLen(a As Byte()) As Integer
  overload: AlgoStudio.Core.ByteArrayExtensions.BitLen*
  nameWithType.vb: ByteArrayExtensions.BitLen(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoStudio.Core.ByteArrayExtensions.BitLen(System.Byte())
  name.vb: BitLen(Byte())
- uid: AlgoStudio.Core.ByteArrayExtensions.GetBit(System.Byte[],System.UInt64)
  commentId: M:AlgoStudio.Core.ByteArrayExtensions.GetBit(System.Byte[],System.UInt64)
  id: GetBit(System.Byte[],System.UInt64)
  isExtensionMethod: true
  parent: AlgoStudio.Core.ByteArrayExtensions
  langs:
  - csharp
  - vb
  name: GetBit(Byte[], UInt64)
  nameWithType: ByteArrayExtensions.GetBit(Byte[], UInt64)
  fullName: AlgoStudio.Core.ByteArrayExtensions.GetBit(System.Byte[], System.UInt64)
  type: Method
  source:
    remote:
      path: AlgoStudio.Core/ByteArrayExtensions.cs
      branch: MigrateTests
      repo: https://frankstech@dev.azure.com/frankstech/Algorand%20for%20Visual%20Studio/_git/Algorand%20for%20Visual%20Studio
    id: GetBit
    path: ../../AlgoStudio/AlgoStudio.Core/ByteArrayExtensions.cs
    startLine: 39
  assemblies:
  - AlgoStudio - Backup.Core
  namespace: AlgoStudio.Core
  syntax:
    content: public static int GetBit(this byte[] a, ulong b)
    parameters:
    - id: a
      type: System.Byte[]
    - id: b
      type: System.UInt64
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetBit(a As Byte(), b As ULong) As Integer
  overload: AlgoStudio.Core.ByteArrayExtensions.GetBit*
  nameWithType.vb: ByteArrayExtensions.GetBit(Byte(), UInt64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoStudio.Core.ByteArrayExtensions.GetBit(System.Byte(), System.UInt64)
  name.vb: GetBit(Byte(), UInt64)
- uid: AlgoStudio.Core.ByteArrayExtensions.ToTealUlong(System.Byte[])
  commentId: M:AlgoStudio.Core.ByteArrayExtensions.ToTealUlong(System.Byte[])
  id: ToTealUlong(System.Byte[])
  isExtensionMethod: true
  parent: AlgoStudio.Core.ByteArrayExtensions
  langs:
  - csharp
  - vb
  name: ToTealUlong(Byte[])
  nameWithType: ByteArrayExtensions.ToTealUlong(Byte[])
  fullName: AlgoStudio.Core.ByteArrayExtensions.ToTealUlong(System.Byte[])
  type: Method
  source:
    remote:
      path: AlgoStudio.Core/ByteArrayExtensions.cs
      branch: MigrateTests
      repo: https://frankstech@dev.azure.com/frankstech/Algorand%20for%20Visual%20Studio/_git/Algorand%20for%20Visual%20Studio
    id: ToTealUlong
    path: ../../AlgoStudio/AlgoStudio.Core/ByteArrayExtensions.cs
    startLine: 41
  assemblies:
  - AlgoStudio - Backup.Core
  namespace: AlgoStudio.Core
  syntax:
    content: public static ulong ToTealUlong(this byte[] a)
    parameters:
    - id: a
      type: System.Byte[]
    return:
      type: System.UInt64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToTealUlong(a As Byte()) As ULong
  overload: AlgoStudio.Core.ByteArrayExtensions.ToTealUlong*
  nameWithType.vb: ByteArrayExtensions.ToTealUlong(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoStudio.Core.ByteArrayExtensions.ToTealUlong(System.Byte())
  name.vb: ToTealUlong(Byte())
references:
- uid: AlgoStudio.Core
  commentId: N:AlgoStudio.Core
  name: AlgoStudio.Core
  nameWithType: AlgoStudio.Core
  fullName: AlgoStudio.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AlgoStudio.Core.IntentionallyNotImplementedException
  commentId: T:AlgoStudio.Core.IntentionallyNotImplementedException
  name: IntentionallyNotImplementedException
  nameWithType: IntentionallyNotImplementedException
  fullName: AlgoStudio.Core.IntentionallyNotImplementedException
- uid: AlgoStudio.Core.ByteArrayExtensions.Concat*
  commentId: Overload:AlgoStudio.Core.ByteArrayExtensions.Concat
  name: Concat
  nameWithType: ByteArrayExtensions.Concat
  fullName: AlgoStudio.Core.ByteArrayExtensions.Concat
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AlgoStudio.Core.ByteArrayExtensions.ToAccountReference*
  commentId: Overload:AlgoStudio.Core.ByteArrayExtensions.ToAccountReference
  name: ToAccountReference
  nameWithType: ByteArrayExtensions.ToAccountReference
  fullName: AlgoStudio.Core.ByteArrayExtensions.ToAccountReference
- uid: AlgoStudio.Core.AccountReference
  commentId: T:AlgoStudio.Core.AccountReference
  parent: AlgoStudio.Core
  name: AccountReference
  nameWithType: AccountReference
  fullName: AlgoStudio.Core.AccountReference
- uid: AlgoStudio.Core.ByteArrayExtensions.Part*
  commentId: Overload:AlgoStudio.Core.ByteArrayExtensions.Part
  name: Part
  nameWithType: ByteArrayExtensions.Part
  fullName: AlgoStudio.Core.ByteArrayExtensions.Part
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: AlgoStudio.Core.ByteArrayExtensions.Init*
  commentId: Overload:AlgoStudio.Core.ByteArrayExtensions.Init
  name: Init
  nameWithType: ByteArrayExtensions.Init
  fullName: AlgoStudio.Core.ByteArrayExtensions.Init
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: AlgoStudio.Core.ByteArrayExtensions.Replace*
  commentId: Overload:AlgoStudio.Core.ByteArrayExtensions.Replace
  name: Replace
  nameWithType: ByteArrayExtensions.Replace
  fullName: AlgoStudio.Core.ByteArrayExtensions.Replace
- uid: AlgoStudio.Core.ByteArrayExtensions.ToString*
  commentId: Overload:AlgoStudio.Core.ByteArrayExtensions.ToString
  name: ToString
  nameWithType: ByteArrayExtensions.ToString
  fullName: AlgoStudio.Core.ByteArrayExtensions.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AlgoStudio.Core.ByteArrayExtensions.BitLen*
  commentId: Overload:AlgoStudio.Core.ByteArrayExtensions.BitLen
  name: BitLen
  nameWithType: ByteArrayExtensions.BitLen
  fullName: AlgoStudio.Core.ByteArrayExtensions.BitLen
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AlgoStudio.Core.ByteArrayExtensions.GetBit*
  commentId: Overload:AlgoStudio.Core.ByteArrayExtensions.GetBit
  name: GetBit
  nameWithType: ByteArrayExtensions.GetBit
  fullName: AlgoStudio.Core.ByteArrayExtensions.GetBit
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: AlgoStudio.Core.ByteArrayExtensions.ToTealUlong*
  commentId: Overload:AlgoStudio.Core.ByteArrayExtensions.ToTealUlong
  name: ToTealUlong
  nameWithType: ByteArrayExtensions.ToTealUlong
  fullName: AlgoStudio.Core.ByteArrayExtensions.ToTealUlong
